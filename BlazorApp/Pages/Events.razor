@page "/events"
@using Shared
@using BlazorApp.Dico
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IStringLocalizer<Translation> Localizer
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>@Localizer[nameof(Translation.Events)]</PageTitle>

<div class="min-h-screen bg-gray-50 w-full">
    <!-- Header Section -->
    <header class="bg-white shadow sticky top-0 z-10">
        <div class="w-full px-4 py-6 sm:px-6 lg:px-8">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <div class="flex justify-between items-center">
                        <div>
                            <h1 class="text-3xl font-bold text-gray-900">@Localizer[nameof(Translation.Events)]</h1>
                            <p class="mt-1 text-sm text-gray-600">@Localizer[nameof(Translation.BrowseEvents)]</p>
                        </div>
                        <button @onclick="CreateNewEvent" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                            </svg>
                            @Localizer[nameof(Translation.CreateEvent)]
                        </button>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900">@Localizer[nameof(Translation.Events)]</h1>
                        <p class="mt-1 text-sm text-gray-600">@Localizer[nameof(Translation.BrowseEvents)]</p>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </header>

    <!-- Main Content -->
    <main class="w-full px-4 py-6 sm:px-6 lg:px-8">
        @if (_events == null)
        {
        <div class="flex justify-center items-center h-64">
            <div class="flex flex-col items-center space-y-4">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
                <span class="text-gray-600">@Localizer[nameof(Translation.Loading)]</span>
            </div>
        </div>
        }
        else if (!_events.Any())
        {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">@Localizer[nameof(Translation.NoEvents)]</h3>
        </div>
        }
        else
        {
        <div class="space-y-2">
            @foreach (var evt in _events)
            {
            <div @onclick="() => ViewEventDetails(evt.Id)"
                 class="bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer border border-gray-200 hover:border-blue-500 w-full">
                <div class="p-6">
                    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                        <div class="flex-1">
                            <div class="flex items-center space-x-3 mb-2">
                                <h2 class="text-xl font-semibold text-gray-900">@evt.Title</h2>
                                <span class="px-2.5 py-0.5 text-xs font-medium rounded-full bg-gray-100 text-gray-800">
                                            ID: @evt.Id
                                        </span>
                            </div>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div class="flex items-center text-gray-600">
                                    <svg class="w-5 h-5 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <span>@evt.StartDateTime.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                                <div class="flex items-center text-gray-600">
                                    <svg class="w-5 h-5 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                    </svg>
                                    <span>@evt.MaxRegistrations @Localizer[nameof(Translation.Places)]</span>
                                </div>
                                <div class="flex items-center text-gray-600">
                                    <svg class="w-5 h-5 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                    </svg>
                                    <span>@evt.CreatedBy</span>
                                </div>
                            </div>
                        </div>

                        <div class="flex flex-wrap gap-2 justify-end" @onclick:stopPropagation>
                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <button @onclick="() => OnDelete(evt)" class="inline-flex items-center px-3 py-2 border border-red-300 rounded-md shadow-sm text-sm font-medium text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                        @Localizer[nameof(Translation.Delete)]
                                    </button>
                                    <button @onclick="() => OnRename(evt)" class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                        </svg>
                                        @Localizer[nameof(Translation.Rename)]
                                    </button>
                                </Authorized>
                                <NotAuthorized>
                                    <button @onclick="() => OnSubscribe(evt.Id)" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                                        </svg>
                                        @Localizer[nameof(Translation.Subscribe)]
                                    </button>
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
            }
        </div>
        }
    </main>
</div>

@code {
private List<EventModel>? _events;

protected override async Task OnInitializedAsync()
{
await ReloadData();
}

private async Task ReloadData()
{
try
{
_events = await Http.GetFromJsonAsync<List<EventModel>>("api/events");
}
catch (Exception ex)
{
await JsRuntime.InvokeVoidAsync("alert",
$"{Localizer[nameof(Translation.LoadError)]}: {ex.Message}");
}
}

private async Task OnDelete(EventModel evt)
{
try
{
var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Localizer[nameof(Translation.DeleteConfirmation)].ToString());
if (!isConfirmed) return;
var response = await Http.DeleteAsync($"api/events/{evt.Id}");
if (response.IsSuccessStatusCode)
{
await ReloadData();
}
else
{
await JsRuntime.InvokeVoidAsync(
"alert",
$"{Localizer[nameof(Translation.DeletionError)]}: {response.ReasonPhrase}"
);
}
}
catch (Exception ex)
{
await JsRuntime.InvokeVoidAsync(
"alert",
$"{Localizer[nameof(Translation.DeletionError)]}: {ex.Message}"
);
}
}

private async Task OnSubscribe(int eventId)
{
try
{
var response = await Http.PostAsync($"api/events/{eventId}/subscribe", null);
var message = response.IsSuccessStatusCode
? Localizer[nameof(Translation.SubscriptionSuccess)]
: Localizer[nameof(Translation.SubscriptionError)];

await JsRuntime.InvokeVoidAsync("alert", message);

if (response.IsSuccessStatusCode)
{
await ReloadData();
}
}
catch (Exception ex)
{
await JsRuntime.InvokeVoidAsync(
"alert",
$"{Localizer[nameof(Translation.SubscriptionError)]}: {ex.Message}"
);
}
}

private void OnRename(EventModel evt)
{
NavigationManager.NavigateTo($"/events/rename/{evt.Id}", true);
}

private void CreateNewEvent()
{
NavigationManager.NavigateTo("/events/create", true);
}

private void ViewEventDetails(int eventId)
{
NavigationManager.NavigateTo($"/events/{eventId}", true);
}
}